--- a/gpioutil	2018-04-03 14:09:01.567320106 +0000
+++ b/gpioutil	2018-04-03 14:10:34.643812636 +0000
@@ -8,17 +8,23 @@
 
 
 def printUsage():
-	print '\nUsage:'
-	print 'gpioutil -n GPIO_NAME  [-v value]'
-	print 'gpioutil -i GPIO_NUM  -d <DIRECTION = in,out,falling,rising,both> [-v value]'
-	print 'gpioutil -p PIN_NAME  -d <DIRECTION = in,out,falling,rising,both> [-v value]'
-	print 'gpioutil -l PIN_NAME     (lookup pin name only)'
-	exit(1)
+        print '\nUsage:'
+        print 'gpioutil -h'
+        print 'gpioutil -n GPIO_NAME  --getdir'
+	print 'gpioutil -n GPIO_NAME  --setdir <out/in>'
+	print 'gpioutil -n GPIO_NAME  --getval'
+	print 'gpioutil -n GPIO_NAME  --setval <0/1>'
+	print '\nExample:'
+	print 'gpioutil -n A0 --getdir		- Get direction of A0 gpio pin'
+	print 'gpioutil -n A0 --setdir out 	- Set direction to output of A0 gpio pin'
+	print 'gpioutil -n A0 --getval  	- Get status of A0 gpio pin'
+	print 'gpioutil -n A0 --setval 1  	- Set high of A0 gpio pin'
+        exit(1)
 
 
 
 if (len(sys.argv) < 2):
-	printUsage()
+        printUsage()
 
 # Pop the command name and point to the args
 sys.argv.pop(0)
@@ -26,139 +32,134 @@
 GPIO_SYSFS = '/sys/class/gpio/'
 
 class Gpio:
-	def __init__(self,gpio_num):
-		self.gpio_num = str(gpio_num)
-		self.direction = ''
-		self.interrupt = ''
-		self.exported = False
+        def __init__(self,gpio_num):
+                self.gpio_num = str(gpio_num)
+                self.direction = ''
+                self.interrupt = ''
+                self.exported = False
 
-	def getPath(self,name):
-		return GPIO_SYSFS+'gpio'+self.gpio_num+'/'+name
+        def getPath(self,name):
+                return GPIO_SYSFS+'gpio'+self.gpio_num+'/'+name
 	
-	def export(self):
-		if (os.path.exists(GPIO_SYSFS+'export') == False):
-			raise Exception("ERROR - GPIO_SYSFS path does not exist.  Does this platform support GPIOS?")
-		if (os.path.exists(GPIO_SYSFS+'gpio'+self.gpio_num) == False):
-			self.write(GPIO_SYSFS+'export',self.gpio_num)
+        def export(self):
+                if (os.path.exists(GPIO_SYSFS+'export') == False):
+                        raise Exception("ERROR - GPIO_SYSFS path does not exist.  Does this platform support GPIOS?")
+                if (os.path.exists(GPIO_SYSFS+'gpio'+self.gpio_num) == False):
+                        self.write(GPIO_SYSFS+'export',self.gpio_num)
 			
-		self.exported = True
+                self.exported = True
 
-	def setDirection(self,dir):
-		if (self.exported == False):
-			raise Exception("ERROR - Not exported: "+self.getPath())
-
-		self.direction = ''
-		self.interrupt = ''
-		if (dir == 'in' or dir == 'out'):
-			self.direction = dir
-		elif (dir == 'rising' or 
-		      dir == 'falling' or
-		      dir == 'both'):
-			self.direction = 'in'
-			self.interrupt = dir
-			self.write(self.getPath('edge'),self.interrupt)
-		else:
-			raise Exception("ERROR - Invalid Direction: "+dir)
-
-		current_direction = self.read(self.getPath('direction'))
-		if current_direction != self.direction:
-			self.write(self.getPath('direction'),self.direction)
-
-	def setValue(self,value):
-		if (value == '0'):
-			self.write(self.getPath('value'),'0')
-		elif (value == '1'):
-			self.write(self.getPath('value'),'1')
-		else:
-			raise Exception("ERROR - Invalid value: "+value)
+        def setDirection(self,dir):
+                if (self.exported == False):
+                        raise Exception("ERROR - Not exported: "+self.getPath())
+
+                self.direction = ''
+                self.interrupt = ''
+                if (dir == 'in' or dir == 'out'):
+                        self.direction = dir
+                elif (dir == 'rising' or
+                      dir == 'falling' or
+                      dir == 'both'):
+                        self.direction = 'in'
+                        self.interrupt = dir
+                        self.write(self.getPath('edge'),self.interrupt)
+                else:
+                        raise Exception("ERROR - Invalid Direction: "+dir)
+
+                current_direction = self.read(self.getPath('direction'))
+                if current_direction != self.direction:
+                        self.write(self.getPath('direction'),self.direction)
+
+        def setValue(self,value):
+                if (value == '0'):
+                        self.write(self.getPath('value'),'0')
+                elif (value == '1'):
+                        self.write(self.getPath('value'),'1')
+                else:
+                        raise Exception("ERROR - Invalid value: "+value)
 	
-	def getValue(self):
-		return self.read(self.getPath('value'))
+        def getValue(self):
+                return self.read(self.getPath('value'))
 
-	def write(self,path,data):
-		f = open(path,'w')
-		f.write(data)
-		f.close()
-
-
-	def read(self,path):
-		f = open(path,'r')
-		data = f.readline().strip()
-		f.close()
-		return data
+        def getDirection(self):
+                return self.read(self.getPath('direction'))
+        def write(self,path,data):
+                f = open(path,'w')
+                f.write(data)
+                f.close()
+
+
+        def read(self,path):
+                f = open(path,'r')
+                data = f.readline().strip()
+                f.close()
+                return data
 
 
 
 if __name__ == '__main__':
 
-	try:
-		opts, args = getopt.getopt(sys.argv,"hn:i:d:v:p:l:")
- 	except getopt.GetoptError:
- 		printUsage()
+        try:
+		opts, remainder = getopt.getopt(sys.argv, 'n:h', ['num=','setdir=','getdir','getval','setval=','help',])
+        except getopt.GetoptError:
+                printUsage()
 
 
 
-	lookup = False
-	gpio_name = ""
-	value = ""
-	direction = ""
-	for opt, arg in opts:
- 		if opt == '-h':
-			printUsage()
-
- 		elif opt in ("-n"):
- 			gpio_name = arg
-			lookup = True
- 		elif opt in ("-i"):
- 			gpio_name = arg
- 		elif opt in ("-d"):
-			direction = arg
- 		elif opt in ("-v"):
-			value = arg
-		elif opt in ("-p"):
-			gpio_name = obmc.system.convertGpio(arg)
-		elif opt in ("-l"):
-			gpio_name = obmc.system.convertGpio(arg)
-			print gpio_name
-			exit(0) 
-
-	gpio_info = {}
-	if (lookup == True):
-		if (System.GPIO_CONFIG.has_key(gpio_name) == False):
-			print "ERROR - GPIO Name doesn't exist"
-			print "Valid names: "
-			for n in System.GPIO_CONFIG:
-				print "\t"+n
-			exit(0)
-		gpio_info = System.GPIO_CONFIG[gpio_name]
-		direction = gpio_info['direction']
-		if (gpio_info.has_key('gpio_num')):
-			gpio_name = str(gpio_info['gpio_num'])
-		else:
-			gpio_name = str(obmc.system.convertGpio(gpio_info['gpio_pin']))
-		print "GPIO ID: "+gpio_name+"; DIRECTION: "+direction
+        lookup = False
+        gpio_name = ""
+        value = ""
+        direction = ""
+        getdir = 0
+        setdir = 0
+        getval = 0
+        setval = 0
+        for opt, arg in opts:
+                if opt in ('-n', '--num'):
+
+                        gpio_name = obmc.system.convertGpio(arg)
+                elif opt in ('-s', '--setdir'):
+                        direction = arg
+                        setdir = 1
+                elif opt == '--getdir':
+                        getdir = 1
+                elif opt == '--getval':
+                        getval = 1
+                elif opt == '--setval':
+                        value = arg
+                        setval = 1
+                elif opt in ('-h', '--help'):
+	                printUsage()
 
 
 	## Rules
-	if (gpio_name == ""):
-		print "ERROR - Gpio not specified"
-		printUsage()
-
-	if (direction == "in" and value != ""):
-		print "ERROR - Value cannot be specified when direction = in"
-		printUsage()
-
-	gpio = Gpio(gpio_name)
-	try:
-		gpio.export()
-		if (direction != ""):
-			gpio.setDirection(direction)
-
-		if (value == ""):
-			print gpio.getValue()
-		else:
-			gpio.setValue(value)
+        if (gpio_name == ""):
+                print "ERROR - Gpio name not specified"
+                printUsage()
+
+        if (direction != ""):
+                if(direction != 'out' and direction != 'in'):
+                        print "ERROR - Direction should be out or in"
+                        printUsage()
+
+        if (value != ""):
+                if(value != '1' and value != '0'):
+                        print "ERROR - Value should be 0 or 1"
+                        printUsage()
+        gpio = Gpio(gpio_name)
+        try:
+                gpio.export()
+                if (setdir == 1):
+                        gpio.setDirection(direction)
+                elif (setval == 1):
+                        gpio.setValue(value)
+                elif (getdir == 1):
+                        print gpio.getDirection()
+                elif (getval == 1):
+                        print gpio.getValue()
+                else:
+                        printUsage()
 
-	except Exception as e:
-		print e
+        except Exception as e:
+                print e
 		
