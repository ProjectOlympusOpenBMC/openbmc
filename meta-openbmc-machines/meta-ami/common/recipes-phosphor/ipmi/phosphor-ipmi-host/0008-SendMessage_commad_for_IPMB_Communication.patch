diff -Naur old/apphandler.cpp new/apphandler.cpp
--- old/apphandler.cpp	2018-03-16 16:08:24.948798425 +0530
+++ new/apphandler.cpp	2018-03-16 19:13:10.052773939 +0530
@@ -22,6 +22,12 @@
 #include <stdlib.h>
 #include <iostream>
 
+#include "ipmistruct.h"
+#include <mqueue.h>
+
+int ValidateIPMBChksum1(INT8U* );
+int PostMsg (MsgPkt_T* , INT8S *);
+
 extern sd_bus *bus;
 
 constexpr auto app_obj = "/org/openbmc/NetworkManager/Interface";
@@ -976,6 +982,153 @@
     return rc;
 }
 
+typedef struct
+{
+    INT8U   count;
+
+}__attribute__((packed)) sendreq;
+
+
+typedef struct
+{
+    INT8U   CompletionCode;
+    INT8U   data;
+
+}__attribute__((packed)) sendres;
+
+
+/*---------------------------------------------------------
+ * * ValidateIPMBChksum1	       			   *
+ * Function to validate IPMB Checksum1 for SendMessage Cmd *
+ * -------------------------------------------------------*/
+int ValidateIPMBChksum1(INT8U* Data)
+{
+    int i=0;
+    INT8U chksum=0;
+
+    for (i = 0; i < 3; i++)
+    {
+        chksum += *(Data + i);
+    }
+
+    if (chksum != 0)
+    {
+        return FALSE;
+    }
+    return TRUE;
+
+}
+
+/*--------------------------------------------------
+ * @fn PostMsg					   *
+ * @brief Post a message to the destination task   *
+ * @param MsgPkt   - Message to be posted.	   *
+ * @param Queue	   - Queue to post this message to.*
+ * @return   0 if success, -1 if failed.	   *
+ *------------------------------------------------*/
+int
+PostMsg (IPMIMsgHdr_T* pMsgPkt_T, INT8S *Queuepath)
+{
+	INT8U Err = 0 ;
+	mqd_t fd = (mqd_t)-1;
+        fd = mq_open(Queuepath, O_WRONLY);
+        if(fd == -1 )
+        {
+                syslog(LOG_WARNING,"Can't able to open\n");
+                return -1;
+        }
+
+	
+        Err =  mq_send(fd,(const char*)pMsgPkt_T, sizeof(pMsgPkt_T), 0);
+        if ((Err == -1))
+        {
+                syslog(LOG_WARNING,"Message.c : PostMsg ( %s ) - %x %s\n", Queuepath, errno, strerror(errno));
+                return -1;
+        }
+
+	return 0;
+}
+
+ipmi_ret_t ipmi_app_send_message(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
+                             ipmi_request_t request, ipmi_response_t response,
+                             ipmi_data_len_t data_len, ipmi_context_t context)
+{
+	int tempret = 0;
+	int ReqLen = 0;
+	int SendMsgSeqNum = 0;
+	IPMIMsgHdr_T* pIPMIMsgHdr;
+	MsgPkt_T* m_MsgPkt ;
+
+	pIPMIMsgHdr = (IPMIMsgHdr_T *)malloc(sizeof(IPMIMsgHdr_T));
+	m_MsgPkt    = (MsgPkt_T *)malloc(sizeof(m_MsgPkt));
+
+	 // Status code.
+	ipmi_ret_t rc = IPMI_CC_OK;
+
+	/* Forming IPMI Message Header */
+	pIPMIMsgHdr->ResAddr = 0x2C;
+	pIPMIMsgHdr->NetFnLUN = (NETFUN_APP << 2);
+	pIPMIMsgHdr->ReqAddr = 0x20;
+	pIPMIMsgHdr->Cmd = DEVICE_ID_CMD;	
+
+	ReqLen = 0x08;
+
+	pIPMIMsgHdr->RqSeqLUN = (SendMsgSeqNum << 2) & 0xFC; /* Seq Num and LUN =00 */
+
+	pIPMIMsgHdr->ChkSum = DEVICEID_CHECKSUM;
+	if(ValidateIPMBChksum1((INT8U*)pIPMIMsgHdr) == FALSE)
+        {
+		syslog(LOG_WARNING, "SendMsg: CheckSum validation failed\n");
+                rc = CC_INV_DATA_FIELD;
+                goto finish;
+        }
+
+	m_MsgPkt->Size = ReqLen - 1;
+
+	/* Copy the message data */
+        memcpy (m_MsgPkt->Data, &pIPMIMsgHdr,sizeof(pIPMIMsgHdr));
+
+	/* Header verification and checksum calucation is complted and successful. So create a message packet for IPMB */
+	m_MsgPkt->NetFnLUN = pIPMIMsgHdr->NetFnLUN;
+	m_MsgPkt->Cmd	= pIPMIMsgHdr->Cmd;
+
+	m_MsgPkt->Param    = BRIDGING_REQUEST;
+
+	tempret=snprintf((char *)m_MsgPkt->SrcQ,sizeof(m_MsgPkt->SrcQ),"%s",IPMB_IFC_Q);
+	if((tempret<0)||((INT8U)tempret>=sizeof(m_MsgPkt->SrcQ)))
+	{
+		syslog(LOG_WARNING, "SendMsg: Buffer overflow\n");
+                rc = CC_INV_DATA_FIELD;
+                goto finish;
+	}
+
+	/* Response length is set to zero to make MsgHndlr skip responding to this request
+         * The Response will be handled by the ipmb interface .
+         */
+	rc = IPMI_CC_OK;
+	
+	m_MsgPkt->Cmd = PAYLOAD_IPMI_MSG;
+
+	/* Post the message to interface */
+        if (0 != PostMsg (pIPMIMsgHdr, (INT8S *)m_MsgPkt->SrcQ))
+        {
+		syslog(LOG_WARNING, "SendMsg: Failed to post message to interface queue\n");
+		goto finish;
+        }
+	
+	rc = IPMI_CC_OK;
+finish:
+	sendres res1 ;
+	res1.data = 33;
+	res1.CompletionCode = rc;
+	*data_len = sizeof(res1);
+
+	// Pack the actual response
+	memcpy(response, &res1, *data_len);
+
+	return rc;
+}
+
 void register_netfn_app_functions()
 {
     // <Get BT Interface Capabilities>
@@ -1040,6 +1193,10 @@
     ipmi_register_callback(NETFUN_APP, IPMI_CMD_GET_CHAN_INFO, NULL, ipmi_app_channel_info,
                            PRIVILEGE_USER);
 
+    // <Get SendMessage  Command>
+    printf("Registering NetFn:[0x%X], Cmd:[0x%X]\n",NETFUN_APP, IPMI_CMD_SEND_MESSAGE);
+    ipmi_register_callback(NETFUN_APP, IPMI_CMD_SEND_MESSAGE, NULL, ipmi_app_send_message,
+                           PRIVILEGE_USER);
     return;
 }
 
diff -Naur old/apphandler.h new/apphandler.h
--- old/apphandler.h	2018-03-16 16:08:24.904798425 +0530
+++ new/apphandler.h	2018-03-16 16:26:32.840796022 +0530
@@ -13,6 +13,7 @@
     IPMI_CMD_GET_DEVICE_GUID        = 0x08,
     IPMI_CMD_RESET_WD               = 0x22,
     IPMI_CMD_SET_WD                 = 0x24,
+    IPMI_CMD_SEND_MESSAGE           = 0x34,
     IPMI_CMD_GET_CAP_BIT            = 0x36,
     IPMI_CMD_SET_CHAN_ACCESS        = 0x40,
     IPMI_CMD_GET_CHANNEL_ACCESS     = 0x41,
diff -Naur old/i2c_helper.h new/i2c_helper.h
--- old/i2c_helper.h	2018-03-16 16:08:24.904798425 +0530
+++ new/i2c_helper.h	2018-03-16 16:27:19.348795919 +0530
@@ -43,6 +43,10 @@
 //typedef unsigned short u16;
 typedef unsigned char	INT8U;
 typedef char INT8;
+typedef char  INT8S;
+typedef unsigned short INT16U;
+typedef unsigned long   INT32U;
+
 
 #define I2C_READ                    ( 1 )
 typedef struct _i2c_message
diff -Naur old/ipmistruct.h new/ipmistruct.h
--- old/ipmistruct.h	1970-01-01 05:30:00.000000000 +0530
+++ new/ipmistruct.h	2018-03-16 16:11:20.756798037 +0530
@@ -0,0 +1,48 @@
+#pragma once
+#include <string>
+#include <vector>
+
+#ifndef FALSE
+    #define      FALSE   0
+    #define      TRUE    1
+#endif
+
+#define BRIDGING_REQUEST        0x31
+#define PAYLOAD_IPMI_MSG	0x00
+#define IP6_ADDR_LEN 		16
+#define MSG_PAYLOAD_SIZE        60
+#define PIPE_NAME_LEN           64
+#define DEVICEID_CHECKSUM	0xBC
+#define DEVICEID_CHECKSUM2       0xDF
+#define	DEVICE_ID_CMD		0x01		
+#define IPMB_IFC_Q    "/mq_ipmb_req_4"
+
+
+/* IPMI Message Header */
+typedef struct
+{
+    INT8U       ResAddr; 
+    INT8U       NetFnLUN;
+    INT8U       ChkSum;
+    INT8U       ReqAddr; 
+    INT8U       RqSeqLUN; 
+    INT8U       Cmd;
+//    INT8U	ChkSum2;
+} __attribute__((packed)) IPMIMsgHdr_T;
+
+
+/*-----------------------------------
+ * Type definitions
+ *-----------------------------------*/
+typedef struct
+{
+    INT32U      Param;                    /* Parameter */
+    INT8U       Channel;                  /* Originator's channel number */
+    INT8U       SrcQ [PIPE_NAME_LEN];     /* Originator Queue */
+    INT8U       Cmd;                      /* Command that needs to be processed*/
+    INT8U       NetFnLUN;                 /* Net function and LUN of command   */
+    INT8U       Privilege;                /* Current privilege level */
+    INT32U      Size;                     /* Size of the data */
+    INT8U       Data [MSG_PAYLOAD_SIZE];  /* Data */
+} __attribute__((packed)) MsgPkt_T;	
+
